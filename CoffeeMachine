package machine

enum class State {
    CHOOSING_ACTION,
    CHOOSING_COFFEE,
    FILL_WATER,
    FILL_MILK,
    FILL_BEANS,
    FILL_CUPS,
    EXIT
}

class CoffeeMachine {
    private var water = 400
    private var milk = 540
    private var beans = 120
    private var cups = 9
    private var money = 550
    private var state = State.CHOOSING_ACTION

    fun process(input: String) {
        when (state) {
            State.CHOOSING_ACTION -> handleAction(input)
            State.CHOOSING_COFFEE -> handleBuy(input)
            State.FILL_WATER -> {
                water += input.toInt()
                println("Write how many ml of milk you want to add:")
                state = State.FILL_MILK
            }
            State.FILL_MILK -> {
                milk += input.toInt()
                println("Write how many grams of coffee beans you want to add:")
                state = State.FILL_BEANS
            }
            State.FILL_BEANS -> {
                beans += input.toInt()
                println("Write how many disposable cups you want to add:")
                state = State.FILL_CUPS
            }
            State.FILL_CUPS -> {
                cups += input.toInt()
                state = State.CHOOSING_ACTION
            }
            State.EXIT -> return
        }
    }

    private fun handleAction(input: String) {
        when (input) {
            "buy" -> {
                println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:")
                state = State.CHOOSING_COFFEE
            }
            "fill" -> {
                println("Write how many ml of water you want to add:")
                state = State.FILL_WATER
            }
            "take" -> {
                println("I gave you \$$money")
                money = 0
            }
            "remaining" -> printState()
            "exit" -> state = State.EXIT
            else -> println("Unknown command")
        }
    }

    private fun handleBuy(input: String) {
        when (input) {
            "1" -> makeCoffee(250, 0, 16, 4)
            "2" -> makeCoffee(350, 75, 20, 7)
            "3" -> makeCoffee(200, 100, 12, 6)
            "back" -> {
                state = State.CHOOSING_ACTION
                return
            }
            else -> println("Invalid option")
        }
        if (input != "back") state = State.CHOOSING_ACTION
    }

    private fun makeCoffee(reqWater: Int, reqMilk: Int, reqBeans: Int, price: Int) {
        val missing = when {
            water < reqWater -> "water"
            milk < reqMilk -> "milk"
            beans < reqBeans -> "coffee beans"
            cups < 1 -> "disposable cups"
            else -> null
        }

        if (missing != null) {
            println("Sorry, not enough $missing!")
        } else {
            println("I have enough resources, making you a coffee!")
            water -= reqWater
            milk -= reqMilk
            beans -= reqBeans
            cups -= 1
            money += price
        }
    }

    private fun printState() {
        println("\nThe coffee machine has:")
        println("$water ml of water")
        println("$milk ml of milk")
        println("$beans g of coffee beans")
        println("$cups disposable cups")
        println("$$money of money")
    }

    fun isRunning(): Boolean = state != State.EXIT
}

fun main() {
    val machine = CoffeeMachine()

    while (machine.isRunning()) {
        println("\nWrite action (buy, fill, take, remaining, exit):")
        val input = readln()
        machine.process(input)
    }
}
